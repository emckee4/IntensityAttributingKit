Today:
    -finish refactoring for new rawIntensity (commit before moving on)
    Other types should be refactored to support new RawIntensity functionality
        -- PressureButton and EPK will need some other means of communicating besides target-action since RawIntensity is a struct. Either delegates or closures (either way watch for retention cycles). class-only protocol delegates can be set as appropriately weak
        -- Single intensity value (derived from global mapping) should reach IATextView

    build pressure view for...
    build IntensityAdjuster
    finish remaining accessory view
    --after refactoring, could make key-press highlighting/background change force specific for all pressure sensitive keys

ExpandingPressureKey:
    tuning:
        enable subview highlighting?
        on selection: flash item?, haptic?, option to reorder array and set as default
    enable dynamic reordering (changing default key)


add additional punctuation/numeric views


IntensityAdjuster:
tap toggle lock, long press or double tap brings up menu (or swap control?: want at least options for changing/adding control as well as possibly including option for changing intensity mapping scheme, though this might be better dealt with under global options)

Accessory view:
    -link insertion should be as pasted NSURL with NSLinkAttributeName, or link should be detected and inserted at send time
    -send button could be an expanding button with delay to offer sending as email



    Need different accessoryView layouts depending on orientation
        use popup for overflow of normal options, including Transform style
    Different Accessories:
        Accessory w/pressure:
        [swap?, intensity dropdown/indicator, insert photo, etc, options?, send/send-as]

        Accessory w/system:
        [swap, intensityslider, ?? options, popup options]

        Accessory no pressure:
        [insert, intensity, options, sendas]

need to reimplement copy/paste in iatextview
    copy function should use super.copy and add IAdata as another type of that
        -- will overriding copy be sufficient for inbuilt cut to work as desired?


--refactor how transformers are added? could use enum or add a singleton manager class to hold refs, or both


Icons: return, !keyboard swap (compose circular arrow on top of keyboard?), options/popup options

-Make kb text color consistant, add highlight effect (background change color?)





--Performance:
    KB rendering:
        consider using spritesheet for keys



    IAString Performance
        Keeping "deep" IAattributes may significantly increase storage size
            It may be possible to retain most of the performance benefits of deep attributes through a combination of partition and removal by range in the transform function
            "shallow" IAAttributes would let us invalidate all in a transform, letting us skip the setter check, and possibly perform more actions by range






