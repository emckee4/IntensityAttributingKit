IntensityAttributingKit is a swift framework which provides a means of creating, displaying, and converting text with "intensity" attributes by the user on an iOS device. Ideally the user would have a 3dTouch capable phone so that intensity of a character can be derived from the pressure applied to the key, but intensity can also be applied using touch duration or a manual control.


____________________________________________
v0.1 goals:

Steps in splitting IATextView:
    Before splitting:
        clean up IATextView:
            //add function for inserting external, prerendedered text (adjusting image attachment bounds in the process)
            simplify transformer selection
            //consider singleton for keyboard (should respond to global memory warnings by unloading if not visible)
    Splitting:
        //move definite editor only items (paste, unused insertion stuff, keyboard refs)
        //what's left that's ambiguous?
        //what's left that needs to be implemented differently?


mainQueue singleton posibilities:
    primary singleton should respond to memory warnings (consider storing keyboard/accessory in NSCache)
        should store preferences unstored elsewhere (what about statics currently stored in ForceIntensityFunctions?)
    intensityTransformers: use dispatch_once for all instantiation of transformers, force all writes on mainQueue, share resources across threads





IAAccessory:
    tweak constraints (particularly in intensityAdjuster), wider transform sample, options:(icon, square constraints)
        Reverse lock display/default on lcoking display: highlight should be unlocked state

RawIntensity:
    -add tunable non-linear algo for force-intensity mapping
        -add static var for tuning

Icons: return?, options, sliderThumb -- fix opacity on camera: alpha 50% on background

IAKeyboard:
    -Make kb and accessory text color consistant
    backspace should change background color on touchdown


IAKit:
    display immutable data
    cleanup detritus



____________________________________________
v0.2 goals:

IAKit:
    Globals: max embedded image size (total pictures), default rendering, store keyboard (or keyboard singleton), default keyboard, etc

IATV:
    -link insertion should be as pasted NSURL with NSLinkAttributeName, or link should be detected and inserted at send time (add finalize()->NSAttributedString)
    -Enable pasting of RTFD, fix copying of images and mix content so that more than plain text can be pasted out
    -add delegate which can inform app that image or link has been tapped for purposes of opening new modals to view them- alternatively these could be included directly in the kit with some customization options

Accessory view:
    lock default button should visually fixed, should update faster, should be capable of receiving values from IATextView's last values
    OPTION MENU: want option menu of some sort on accessory view for: intensity scaling method and constant tuning, changing default intensity rendering, ?preference for IAAdjuster type (always slider vs always pressurepad or both), keyset chooser, ?max image size (it may be preferable to set a fixed size in code)







____________________________________________
eventually:




make all keys some derivative of expanding keys, include larger expansion style option as used in system keyboard popups
-give some sort of feedback on selection, like flash with duration before hiding or light haptic/ click if something suitable is available


--Performance:
KB rendering options:
    spritesheet for keys
    single image with normally transparent keys overlaying
    single image with single control, placing views over specific parts as needed



IAString Performance
Keeping "deep" IAattributes may significantly increase storage size
It may be possible to retain most of the performance benefits of deep attributes through a combination of partition and removal by range in the transform function
"shallow" IAAttributes would let us invalidate all in a transform, letting us skip the setter check, and possibly perform more actions by range

























