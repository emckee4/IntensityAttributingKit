Today:
    Need to cleanup IntensityAdjuster, particularly constraints and bounds issues

    Need to rebuild IAAccessory to use stackview for layout

add additional punctuation/numeric views

want option menu of some sort on accessory view for, among other things, changing intensity renderings

want camera picker on accessory view

want send button on accessory view

???? move text field to top of accessory view? or attach it later in code of final app?
-- probably later option with send button attached.

ExpandingPressureKey (later optional improvements)
    on selection: flash item?, haptic?, option to reorder array and set as default
    enable dynamic reordering (changing default key)


Accessory view:
    -link insertion should be as pasted NSURL with NSLinkAttributeName, or link should be detected and inserted at send time
    -send button could be an expanding button with delay to offer sending as email



    Need different accessoryView layouts depending on orientation
        use popup for overflow of normal options, including Transform style
    Different Accessories:
        Accessory w/pressure:
        [swap?, intensity dropdown/indicator, insert photo, etc, options?, send/send-as]

        Accessory w/system:
        [swap, intensityslider, ?? options, popup options]

        Accessory no pressure:
        [insert, intensity, options, sendas]

need to reimplement copy/paste in iatextview
    copy function should use super.copy and add IAdata as another type of that
        -- will overriding copy be sufficient for inbuilt cut to work as desired?


--refactor how transformers are added? could use enum or add a singleton manager class to hold refs, or both


Icons: return, options, camera, ?

-Make kb text color consistant, add highlight effect (background change color?)





--Performance:
    KB rendering:
        consider using spritesheet for keys



    IAString Performance
        Keeping "deep" IAattributes may significantly increase storage size
            It may be possible to retain most of the performance benefits of deep attributes through a combination of partition and removal by range in the transform function
            "shallow" IAAttributes would let us invalidate all in a transform, letting us skip the setter check, and possibly perform more actions by range






