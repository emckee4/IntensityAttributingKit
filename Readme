IntensityAttributingKit (v3)
Â© 2015 by Evan McKee

IntensityAttributingKit is a swift framework which provides a means of creating, displaying, and converting text with "intensity" attributes by the user on an iOS device. Ideally the user would have a 3dTouch capable phone so that intensity of a character can be derived from the pressure applied to the key, but intensity can also be applied using touch duration or a manual control.

With version 3 the editor and view were rewritten as subclasses of UIView rather than UITextView. Building directly on TextKit enabled more animation options and the removal of some hacky fixes that had been necessitated by Apple's use of private APIs within some of their own objects (like UITextView). The new IACompositeTextView/Editor classes (derivatives of the IACompositeBase abstract class) use 4 layers to render animations for the intensity rendering schemes that support it. On top is the selectionView which draws selection rects, the text insertion caret, and text marking. Below that are the top and bottom ThinTextView's. The top ThinTextView is the one responsible for generating sizing information and is the drawer of text in the schemes which don't support animation. When animating, the bottomTV will be drawn with different attributes and some combination of changing opacities between the layers will result in the animation effect for the user. Beneath all of these layers is the imageLayerView which draws the thumbnails of any inserted attachments at the proper position which is determined by the layout engine in the topTV, which itself will display empty rectangles where an attachment belongs. This seperate layer is used so that images can be properly displayed even when the text layers are animating their opacity. It also may (or may not, I've only eyeball measured this since this design decision was otherwise necessary) improve performance text drawing in cases when an image needs to be moved around (e.g. when inserting text before an image or resizing textview) but doesn't need to be fully redrawn.

A few of the new classes:

ThinTextView is similar to UITextView in that it has an NSLayoutManager, an NSTextContainer (actually a subclass called IATextContainer), and an NSTextStorage. The major differences between it and a UITextView are that it doesn't conform to UITextInput, and it draws in its own layer rather than a private subview. Additionally it's more simple positionally (e.g. no insets and some aspects of autolayout have been simplified, since both of those are handled higher in the hierarchy) and the use of the IATextContainer lets an IATextAttachment return an empty image of a specified size if that's desired for the view.

IACompositeBase contains the common code for the IACompositeTextView and IACompositeTextEditor.

IACompositeTextView is made for display only and doesn't support editing beyond simply setting an IAString. It's intended to allow more caching and other performance minded changes, though much hasn't been implemented.
IACompositeTextEditor conforms to UITextInput and is built to interact with the IAKeyboard and IAAccessory. It has custom gesture recognizers, more intricate copy/pasting and insertion capabilities.

In all cases it's intended that sizing for autosizing cells will be handled with calls to systemLayoutSizeFittingSize rather than the interplay between internal constraints and intrinsicContentSize as is used in the UITextView. This is simpler to implement and more efficient since it us to get away with fewer text layout passes when determining content size.

As far as performance goes, this isn't expected to be very useful for anything older than the 5s or preferably the 6. 




Next steps:

    Code cleanup: Much of the messiness that resulted from experimentation and changes in design should be cleaned up. The awkward hacks involved in shoehorning TextKit into this project could at least be better explained. The project and file structure also needs some serious cleanup.

    Multiple keysets
        -> eventually make more/all keys potentially expanding if performance is sufficient

    Support additional attachment types

    Some of the data structures in the IAString may be less than optimal since they were in part excuses to learn and practice building data structures using swift generics. It probably doesn't matter enough to be a priority.

Additional render schemes (if possible):
    static fade
    dynamic/pulsing fade
    animated glyphs
    animated colored shadows

